{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Description",
  "Transform": "AWS::Serverless-2016-10-31",
  "Parameters": {
    "Environment": {
      "Type": "String",
      "Description": "Deployment environment",
      "AllowedValues": [
        "test",
        "uat",
        "prod"
      ],
      "ConstraintDescription": "Allowed values: [test, uat, prod]",
      "MinLength": 3,
      "MaxLength": 4
    },
    "AutomationStack": {
      "Type": "String",
      "Description": "Automation stack name",
      "AllowedPattern": "^[a-zA-Z][-a-zA-Z0-9]*$",
      "ConstraintDescription": "Must be a valid Cloudformation Stack name",
      "MinLength": 1,
      "MaxLength": 255
    },
    "CodeS3Key": {
      "Type": "String",
      "MinLength": 3
    },
    "SubnetIds": {
      "Type": "String",
      "MinLength": 3
    },
    "SecurityGroup": {
      "Type": "String",
      "MinLength": 3
    }
  },
  "Resources": {
    "Volume": {
      "Type": "AWS::EC2::Volume",
      "Condition": "CreateProdResources",
      "Properties": {
        "Size": {
          "Fn::If": [
            "CreateProdResources",
            "100",
            "10"
          ]
        },
        "AvailabilityZone": {
          "Fn::GetAtt": [
            "Ec2Instance",
            "AvailabilityZone"
          ]
        }
      }
    },
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "InstanceTenancy": "dedicated",
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsSupport": false,
        "EnableDnsHostnames": false,
        "Tags": [
          {
            "Key": "foo",
            "Value": "bar"
          }
        ]
      }
    },
    "Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "CidrBlock": "10.0.0.0/24",
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "DbInstance": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "Engine": "MySQL",
        "EngineVersion": "5.5",
        "DBInstanceClass": "db.m1.small",
        "AllocatedStorage": "5",
        "MasterUserPassword": "MyPassword",
        "MasterUsername": "MyName"
      }
    },
    "Ec2Instance": {
      "Type": "AWS::EC2::Instance",
      "Condition": "CreateProdResources",
      "Properties": {
        "UserData": {
          "Fn::Base64": "#!/bin/bash -e\r\nwget https://opscode-omnibus-packages.s3.amazonaws.com/ubuntu/12.04/x86_64/chef_11.6.2-1.ubuntu.12.04_amd64.deb\r\ndpkg -i chef_11.6.2-1.ubuntu.12.04_amd64.deb\r\n"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "RegionMap",
            {
              "Ref": "AWS::Region"
            },
            "64"
          ]
        },
        "InstanceType": {
          "Fn::If": [
            "CreateProdResources",
            "c1.xlarge",
            {
              "Fn::If": [
                "CreateDevResources",
                "m1.large",
                "m1.small"
              ]
            }
          ]
        }
      },
      "DependsOn": [
        "DbInstance",
        "Subnet"
      ]
    },
    "AutomationServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "cloudformation.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
      }
    },
    "KinesisFirehoseRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "firehose.amazonaws.com"
              },
              "Action": "sts:AssumeRole",
              "Condition": {
                "StringEquals": {
                  "sts:ExternalId": {
                    "Ref": "AWS::AccountId"
                  }
                },
                "DateGreaterThan": {
                  "aws:CurrentTime": "2013-08-16T12:00:00Z"
                },
                "DateLessThan": {
                  "aws:CurrentTime": "2013-08-16T15:00:00Z"
                },
                "IpAddress": {
                  "aws:SourceIp": [
                    "192.0.2.0/24",
                    "203.0.113.0/24"
                  ]
                },
                "StringLikeIfExists": {
                  "ec2:InstanceType": [
                    "t1.*",
                    "t2.*",
                    "m3.*"
                  ]
                },
                "Null": {
                  "aws:TokenIssueTime": [
                    "true"
                  ]
                }
              }
            }
          ]
        }
      }
    },
    "DeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": {
          "Ref": "AWS::StackName"
        }
      },
      "DeletionPolicy": "Retain",
      "Metadata": {
        "SomeProp": "SomeProp",
        "AnotherProp": "AnotherProp"
      }
    },
    "ImageBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-images"
            ]
          ]
        }
      },
      "DeletionPolicy": "Retain",
      "Metadata": {
        "Object1": "Location1",
        "Object2": "Object2"
      }
    },
    "DeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "DeploymentBucket"
        },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "AutomationServiceRole",
                    "Arn"
                  ]
                }
              },
              "Action": "s3:*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "DeploymentBucket"
                      }
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "DeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ]
        }
      }
    },
    "KinesisStream": {
      "Type": "AWS::Kinesis::Stream",
      "Properties": {
        "RetentionPeriodHours": 24,
        "Name": "MyStream"
      }
    },
    "KinesisStreamMapping": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "Properties": {
        "Enabled": true,
        "EventSourceArn": {
          "Fn::GetAtt": [
            "KinesisStream",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "KinesisStream"
      ]
    },
    "LambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Description": "",
        "FunctionName": {
          "Ref": "AWS::StackName"
        },
        "Runtime": "dotnetcore1.0",
        "MemorySize": 256,
        "Timeout": 30,
        "Handler": "SomeProject::SomeProject.SomeFunction::FunctionHandler",
        "Code": {
          "S3Bucket": {
            "Fn::ImportValue": {
              "Fn::Sub": "${AutomationStack}-DeploymentBucket"
            }
          },
          "S3Key": {
            "Ref": "CodeS3Key"
          }
        },
        "Environment": {
          "Variables": {
            "EnvironmentName": {
              "Ref": "Environment"
            }
          }
        }
      }
    },
    "MonitoringSnsTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "DisplayName": {
          "Ref": "AWS::StackName"
        },
        "Subscription": [
          {
            "Endpoint": "team@example.com",
            "Protocol": "email"
          }
        ]
      }
    },
    "KmsKey": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description": "A Key",
        "KeyPolicy": {
          "Version": "2012-10-17",
          "Id": "key-default-1",
          "Statement": [
            {
              "Sid": "Allow the administration of the key",
              "Effect": "Allows",
              "Principal": {
                "AWS": "arn:aws:iam::123456789012:user/Alice"
              },
              "Action": [
                "kms:Create*",
                "kms:Describe*",
                "kms:Enable*",
                "kms:List*",
                "kms:Put*",
                "kms:Update*",
                "kms:Revoke*",
                "kms:Disable*",
                "kms:Get*",
                "kms:Delete*",
                "kms:ScheduleKeyDeletion",
                "kms:CancelKeyDeletion"
              ],
              "Resource": "*"
            }
          ]
        }
      }
    },
    "LaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "UserData": "",
        "ImageId": "ami-e689729e",
        "InstanceType": "t2.micro"
      }
    },
    "AutoScalingGroupScheduledAction": {
      "Type": "AWS::AutoScaling::ScheduledAction",
      "Properties": {
        "AutoScalingGroupName": {
          "Ref": "AutoScalingGroup"
        },
        "StartTime": "2017-06-02T20:00:00Z",
        "DesiredCapacity": 2
      }
    },
    "AutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "LaunchConfigurationName": {
          "Ref": "LaunchConfig"
        },
        "DesiredCapacity": 1,
        "AvailabilityZones": {
          "Fn::GetAZs": ""
        },
        "MaxSize": 2,
        "MinSize": 1
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": 3,
          "Timeout": "PT15M"
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MaxBatchSize": "2",
          "MinInstancesInService": 2,
          "PauseTime": "PT10M",
          "WaitOnResourceSignals": true
        },
        "AutoScalingScheduledAction": {
          "IgnoreUnmodifiedGroupSizeProperties": true
        }
      },
      "Metadata": {
        "Key1": "Value1",
        "Key2": "Value2"
      }
    },
    "AspNetCoreFunction": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "Handler": "MyCoolProject.Lambda.WebApi::MyCoolProject.Lambda.WebApi.LambdaEntryPoint::FunctionHandlerAsync",
        "Runtime": "dotnetcore2.0",
        "CodeUri": "",
        "MemorySize": 256,
        "Timeout": 30,
        "Policies": [
          "AWSLambdaFullAccess"
        ],
        "Environment": {
          "Variables": {
            "ENV": "test"
          }
        },
        "Events": {
          "Any": {
            "Type": "Api",
            "Properties": {
              "Path": "/{proxy+}",
              "Method": "ANY"
            }
          }
        }
      }
    },
    "IoTPlacement": {
      "Type": "AWS::IoT1Click::Placement",
      "Properties": {
        "Attributes": {
          "Name": "Test"
        }
      }
    }
  },
  "Outputs": {
    "DeploymentBucket": {
      "Value": {
        "Ref": "DeploymentBucket"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-DeploymentBucket"
        }
      },
      "Description": {
        "Fn::Sub": [
          "BucketName: ${BucketName}, DomainName: ${DomainName}",
          {
            "BucketName": {
              "Ref": "DeploymentBucket"
            },
            "DomainName": {
              "Fn::GetAtt": [
                "DeploymentBucket",
                "DomainName"
              ]
            }
          }
        ]
      }
    },
    "AutomationServiceRole": {
      "Value": {
        "Fn::GetAtt": [
          "AutomationServiceRole",
          "Arn"
        ]
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-AutomationServiceRole"
        }
      }
    },
    "KmsKeyArn": {
      "Value": {
        "Fn::GetAtt": [
          "KmsKey",
          "Arn"
        ]
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-KmsKeyArn"
        }
      }
    },
    "MonitoringSnsTopicArn": {
      "Value": {
        "Ref": "MonitoringSnsTopic"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-MonitoringSnsTopicArn"
        }
      }
    }
  },
  "Mappings": {
    "RegionMap": {
      "us-east-1": {
        "32": "ami-6411e20d",
        "64": "ami-7a11e213"
      },
      "us-west-1": {
        "32": "ami-c9c7978c",
        "64": "ami-cfc7978a"
      },
      "ue-west-1": {
        "32": "ami-37c2f643",
        "64": "ami-31c2f645"
      },
      "ap-southeast-1": {
        "32": "ami-66f28c34",
        "64": "ami-60f28c32"
      },
      "ap-northeast-1": {
        "32": "ami-9c03a89d",
        "64": "ami-a003a8a1"
      }
    }
  },
  "Conditions": {
    "CreateProdResources": {
      "Fn::Equals": [
        {
          "Ref": "Environment"
        },
        "prod"
      ]
    },
    "CreateDevResources": {
      "Fn::Equals": [
        {
          "Ref": "Environment"
        },
        "dev"
      ]
    },
    "NotCondition": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "Environment"
            },
            "prod"
          ]
        }
      ]
    },
    "AndCondition": {
      "Fn::And": [
        {
          "Fn::Equals": [
            "sg-mysqgroup",
            {
              "Ref": "SecurityGroup"
            }
          ]
        },
        {
          "Condition": "NotCondition"
        }
      ]
    },
    "OrCondition": {
      "Fn::Or": [
        {
          "Fn::Equals": [
            "sg-mysqgroup",
            {
              "Ref": "SecurityGroup"
            }
          ]
        },
        {
          "Condition": "NotCondition"
        }
      ]
    }
  },
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Network Configuration"
          },
          "Parameters": [
            "VPCID",
            "SubnetId",
            "SecurityGroupID"
          ]
        },
        {
          "Label": {
            "default": "Amazon EC2 Configuration"
          },
          "Parameters": [
            "InstanceType",
            "KeyName"
          ]
        }
      ],
      "ParameterLabels": {
        "VPCID": {
          "default": "Which VPC should this be deployed to?"
        }
      }
    }
  }
}